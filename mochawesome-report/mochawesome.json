{
  "stats": {
    "suites": 5,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-15T14:12:51.237Z",
    "end": "2025-10-15T14:12:53.257Z",
    "duration": 2020,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0b53cb45-ad18-49bf-8b15-7f6376356dc2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "26b1c1ef-5a55-4bc1-8634-0464006675a3",
          "title": "POST User - Simulasi dengan jsonplaceholder",
          "fullFile": "C:\\Users\\Cheps Neo\\Desktop\\tugas 5 Api\\tests\\createUsesr.test.js",
          "file": "\\tests\\createUsesr.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a user successfully",
              "fullTitle": "POST User - Simulasi dengan jsonplaceholder should create a user successfully",
              "timedOut": false,
              "duration": 830,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  name: \"Cheps\",\n  job: \"QA Engineer\"\n};\nconst response = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(requestBody)\n});\nconst responseData = await response.json();\nconsole.log(\"Response:\", JSON.stringify(responseData, null, 2));\nexpect(response.status).to.equal(201);\nexpect(responseData).to.have.property(\"name\", \"Cheps\");\nexpect(responseData).to.have.property(\"job\", \"QA Engineer\");\nexpect(responseData).to.have.property(\"id\");\nconst schema = {\n  type: \"object\",\n  properties: {\n    name: { type: \"string\" },\n    job: { type: \"string\" },\n    id: {}\n  },\n  required: [\"name\", \"job\", \"id\"]\n};\nconst validate = ajv.compile(schema);\nconst valid = validate(responseData);\nif (!valid) {\n  console.error(\"Schema errors:\", validate.errors);\n}\nexpect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;",
              "err": {},
              "uuid": "1d7f7326-81ef-4df6-9045-4e6b110787a2",
              "parentUUID": "26b1c1ef-5a55-4bc1-8634-0464006675a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d7f7326-81ef-4df6-9045-4e6b110787a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 830,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b3a8295c-e378-4aaa-ad64-5f418080dae2",
          "title": "DELETE User - Simulasi penghapusan user dummy",
          "fullFile": "C:\\Users\\Cheps Neo\\Desktop\\tugas 5 Api\\tests\\deleteUserPlaceholder.test.js",
          "file": "\\tests\\deleteUserPlaceholder.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete user successfully as part of QA cleanup",
              "fullTitle": "DELETE User - Simulasi penghapusan user dummy should delete user successfully as part of QA cleanup",
              "timedOut": false,
              "duration": 316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://jsonplaceholder.typicode.com/users/1\", {\n  method: \"DELETE\"\n});\nconsole.log(\"DELETE Status:\", response.status);\n// Validasi status response\nexpect([200, 204]).to.include(response.status);",
              "err": {},
              "uuid": "f4d80fa7-4500-4d7a-ab94-7955aa92feb6",
              "parentUUID": "b3a8295c-e378-4aaa-ad64-5f418080dae2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4d80fa7-4500-4d7a-ab94-7955aa92feb6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 316,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a60685fc-82bf-41b8-99f8-a82a96a815bc",
          "title": "GET User - JSON Schema Validation",
          "fullFile": "C:\\Users\\Cheps Neo\\Desktop\\tugas 5 Api\\tests\\getUser.test.js",
          "file": "\\tests\\getUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should match response schema",
              "fullTitle": "GET User - JSON Schema Validation should match response schema",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Kirim request GET ke endpoint user list halaman 2\n    const response = await fetch(\"https://reqres.in/api/users?page=2\");\n    // Ambil dan parsing response menjadi JSON\n    const fullResponse = await response.json();\n    // Cetak isi response untuk debugging\n    console.log(\"Full Response:\", JSON.stringify(fullResponse, null, 2));\n    // Definisi skema JSON yang diharapkan dari response\n    const schema = {\n      type: \"object\",\n      properties: {\n        page: { type: \"number\" },\n        data: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              id: { type: \"number\" },\n              email: { type: \"string\" },\n              first_name: { type: \"string\" },\n              last_name: { type: \"string\" },\n              avatar: { type: \"string\" }\n            },\n            required: [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"]\n          }\n        }\n      },\n      required: [\"page\", \"data\"]\n    };\n    // Kompilasi skema menggunakan AJV\n    const validate = ajv.compile(schema);\n    // Validasi data response terhadap skema\n    const valid = validate(fullResponse);\n    // Jika tidak valid, tampilkan error di console\n    if (!valid) {\n      console.error(\"Schema errors:\", validate.errors);\n    }\n    // Assertion: validasi harus true, jika tidak tampilkan error detail\n    expect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;",
              "err": {},
              "uuid": "fc8475c1-771d-4491-a15f-dfe2543e58c6",
              "parentUUID": "a60685fc-82bf-41b8-99f8-a82a96a815bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc8475c1-771d-4491-a15f-dfe2543e58c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 207,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4387ef11-c926-413d-94bf-2884a659bb5e",
          "title": "POST User - Simulasi dengan jsonplaceholder",
          "fullFile": "C:\\Users\\Cheps Neo\\Desktop\\tugas 5 Api\\tests\\registerUser.test.js",
          "file": "\\tests\\registerUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a user successfully",
              "fullTitle": "POST User - Simulasi dengan jsonplaceholder should create a user successfully",
              "timedOut": false,
              "duration": 323,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  name: \"Cheps\",\n  job: \"QA Engineer\"\n};\nconst response = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(requestBody)\n});\nconst responseData = await response.json();\nconsole.log(\"Response:\", JSON.stringify(responseData, null, 2));\nexpect(response.status).to.equal(201);\nexpect(responseData).to.have.property(\"name\", \"Cheps\");\nexpect(responseData).to.have.property(\"job\", \"QA Engineer\");\nexpect(responseData).to.have.property(\"id\");\nconst schema = {\n  type: \"object\",\n  properties: {\n    name: { type: \"string\" },\n    job: { type: \"string\" },\n    id: {}\n  },\n  required: [\"name\", \"job\", \"id\"]\n};\nconst validate = ajv.compile(schema);\nconst valid = validate(responseData);\nif (!valid) {\n  console.error(\"Schema errors:\", validate.errors);\n}\nexpect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;",
              "err": {},
              "uuid": "76f15a76-f55d-4e0b-88c2-621c1a0f5e92",
              "parentUUID": "4387ef11-c926-413d-94bf-2884a659bb5e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76f15a76-f55d-4e0b-88c2-621c1a0f5e92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 323,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d502f15-7d1c-4b28-9e3b-a0f2a7fe2eb9",
          "title": "PATCH User - Simulasi update dengan jsonplaceholder",
          "fullFile": "C:\\Users\\Cheps Neo\\Desktop\\tugas 5 Api\\tests\\updateUserPlaceholder.test.js",
          "file": "\\tests\\updateUserPlaceholder.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user data successfully",
              "fullTitle": "PATCH User - Simulasi update dengan jsonplaceholder should update user data successfully",
              "timedOut": false,
              "duration": 329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  job: \"Senior QA Engineer\"\n};\nconst response = await fetch(\"https://jsonplaceholder.typicode.com/users/1\", {\n  method: \"PATCH\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(requestBody)\n});\nconst responseData = await response.json();\nconsole.log(\"PATCH Response:\", JSON.stringify(responseData, null, 2));\nexpect(response.status).to.equal(200);\nexpect(responseData).to.have.property(\"job\", \"Senior QA Engineer\");\nconst schema = {\n  type: \"object\",\n  properties: {\n    job: { type: \"string\" }\n  },\n  required: [\"job\"]\n};\nconst validate = ajv.compile(schema);\nconst valid = validate(responseData);\nif (!valid) {\n  console.error(\"Schema errors:\", validate.errors);\n}\nexpect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;",
              "err": {},
              "uuid": "8183c1a0-9fff-4f4d-b8db-4af1ba68cdc3",
              "parentUUID": "0d502f15-7d1c-4b28-9e3b-a0f2a7fe2eb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8183c1a0-9fff-4f4d-b8db-4af1ba68cdc3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 329,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}